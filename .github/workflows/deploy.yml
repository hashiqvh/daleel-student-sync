name: Deploy daleel

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      APP_NAME: daleel
      REMOTE_DIR: /var/www/daleel
      RELEASES_DIR: /var/www/daleel/releases
      SHARED_DIR: /var/www/daleel/shared
      CURRENT_LINK: /var/www/daleel/current
      NODE_ENV: production
      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ vars.NODE_VERSION || '20.x' }}
          cache: npm     # <-- npm cache, looks for package-lock.json

      - name: Install deps
        run: npm ci     # <-- requires committed package-lock.json

      - name: Build
        run: npm run build

      - name: Prepare artifact
        run: |
          mkdir -p deploy_bundle
          if [ -d ".next/standalone" ]; then
            # Standalone deploy (recommended)
            rsync -a .next/standalone/ deploy_bundle/
            rsync -a public/ deploy_bundle/public/ || true
            rsync -a .next/static/ deploy_bundle/.next/static/ || true
            cp package.json package-lock.json deploy_bundle/
          else
            # Fallback: non-standalone (heavier)
            rsync -a \
              --exclude ".git" \
              --exclude ".github" \
              --exclude "node_modules" \
              --exclude ".next/cache" \
              ./ deploy_bundle/
          fi
          date +%Y%m%d%H%M%S > deploy_bundle/RELEASE_TAG

      - name: Upload via rsync
        uses: burnett01/rsync-deployments@7.0.1
        with:
          switches: -az --delete
          path: deploy_bundle/
          remote_path: ${{ env.RELEASES_DIR }}/release_${{ github.run_number }}
          remote_host: ${{ secrets.SSH_HOST }}
          remote_user: ${{ secrets.SSH_USER }}
          remote_port: ${{ secrets.SSH_PORT }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Finalize on server (symlink + reload)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            NEW_RELEASE="${{ env.RELEASES_DIR }}/release_${{ github.run_number }}"

            # Ensure shared env exists and link it
            if [ ! -f "${{ env.SHARED_DIR }}/.env" ]; then
              echo "Missing ${{ env.SHARED_DIR }}/.env"; exit 1
            fi
            ln -sf "${{ env.SHARED_DIR }}/.env" "${NEW_RELEASE}/.env"

            # For non-standalone, install prod deps on server
            if [ ! -d "${NEW_RELEASE}/node_modules" ] && [ -f "${NEW_RELEASE}/package.json" ]; then
              cd "${NEW_RELEASE}"
              if command -v npm >/dev/null 2>&1; then
                npm ci --omit=dev || npm i --omit=dev
              fi
            fi

            # Flip current -> new release atomically
            ln -sfn "${NEW_RELEASE}" "${{ env.CURRENT_LINK }}"

            # PM2 reload (zero downtime) or start first time
            if pm2 describe "${{ env.APP_NAME }}" >/dev/null 2>&1; then
              pm2 reload "${{ env.APP_NAME }}"
            else
              pm2 start /home/ubuntu/ecosystem.config.js
            fi
            pm2 save

